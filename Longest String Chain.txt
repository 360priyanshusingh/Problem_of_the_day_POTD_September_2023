class Solution {
public:
    bool check_predecessor(string  &s1,string  &s2){
              if(s2.size()+1!=s1.size()) return false;

              int first=0,second=0;

              while( first < s1.size()){
                  if(s1[first]==s2[second]) {
                      first++;
                      second++;
                  }
                  else first++;
              }
           return first==s1.size() && second==s2.size();   
    }
    int longestStrChain(vector<string>& words) {
        int n=words.size();

        sort(words.begin(),words.end(),[](string &s1,string &s2){
            return s1.size()< s2.size();
        });
        
        vector<int> dp(n,1);
        int ma=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<i;j++){
                if(check_predecessor(words[i] , words[j])  && dp[i] < dp[j] +1){
                     dp[i] = dp[j]+1;
                }
            }
              ma=max(ma,dp[i]);
        }

        return ma;
    }
};